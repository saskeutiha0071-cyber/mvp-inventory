'use client';

import { useState, useEffect } from 'react';

interface Product {
  id: number;
  name: string;
  quantity: number;
  price: number;
  createdAt: string;
}

export default function Home() {
  const [products, setProducts] = useState<Product[]>([]);
  const [name, setName] = useState('');
  const [quantity, setQuantity] = useState('');
  const [price, setPrice] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchProducts() {
      try {
        const response = await fetch('/api/products');
        if (!response.ok) {
          throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        const data = await response.json();
        if (!Array.isArray(data)) {
          throw new Error('Данные не являются массивом');
        }
        setProducts(data);
      } catch (err: any) {
        setError(err.message || 'Не удалось загрузить данные');
        console.error('Fetch error:', err);
      } finally {
        setLoading(false);
      }
    }
    fetchProducts();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name,
          quantity: parseInt(quantity),
          price: parseFloat(price),
        }),
      });
      if (!response.ok) {
        throw new Error(`Ошибка HTTP: ${response.status}`);
      }
      const newProduct = await response.json();
      setProducts([...products, newProduct]);
      setName('');
      setQuantity('');
      setPrice('');
    } catch (err: any) {
      setError(err.message || 'Не удалось добавить запись');
      console.error('Submit error:', err);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Учёт склада</h1>

      <form onSubmit={handleSubmit} className="mb-4">
        <div className="mb-2">
          <label className="block text-sm font-medium">Название</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="border p-2 w-full"
            required
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-medium">Количество</label>
          <input
            type="number"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            className="border p-2 w-full"
            required
            step="1"
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-medium">Цена</label>
          <input
            type="number"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
            className="border p-2 w-full"
            required
            step="0.01"
          />
        </div>
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">
          Добавить
        </button>
      </form>

      {error && <p className="text-red-500">{error}</p>}

      {loading ? (
        <p>Загрузка...</p>
      ) : products.length === 0 ? (
        <p>Нет данных</p>
      ) : (
        <table className="w-full border">
          <thead>
            <tr>
              <th className="border p-2">Название</th>
              <th className="border p-2">Количество</th>
              <th className="border p-2">Цена</th>
              <th className="border p-2">Дата</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr key={product.id}>
                <td className="border p-2">{product.name}</td>
                <td className="border p-2">{product.quantity}</td>
                <td className="border p-2">{product.price}</td>
                <td className="border p-2">{new Date(product.createdAt).toLocaleDateString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
